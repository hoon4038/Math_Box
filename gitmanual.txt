======================
Git 작업 공간
1. working directory
2. staging area
3. repository

첫 번째 작업 영역인 working directory는 작업을 하는 프로젝트 디렉토리를 말합니다. 그러니까 지금 상황에서는 MathTool 디렉토리가 working directory입니다.

두 번째 작업 영역인 staging area는 git add를 한 파일들이 존재하는 영역입니다. 커밋을 하게되면 staging area에 있는 파일들만 커밋에 반영됩니다.

세 번째 작업 영역인 repository는 working directory의 변경 이력들이 저장되어 있는 영역입니다. 그러니까 커밋들이 저장되는 영역이라는 뜻인데요. 조금 풀어서 설명해볼게요.

working directory에서 뭔가 작업을 하고,
작업한 파일들을 git add 해주고,
커밋을 하면 staging area에 있던 파일들의 모습이 마치 영화의 한 장면, 스냅샷(snapshot)처럼 이 repository에 저장되는 겁니다.

Commit : 커밋을 하면 staging area에 있던 파일들이 커밋에 반영되고, 이제 모든 파일들은 최신 커밋과 차이가 없게 되니까 Unmodified 상태

Commit 주의사항
1. 처음으로 커밋을 하기 전 사용자의 이름과 이메일 주소를 설정!
2. 커밋 메시지 남기기 (옵션 -m)
3. 커밋할 파일을 git add로 지정해 주기


========================================================
Git에서 파일들의 상태
Untracked 상태 : Git에 의해 변동사항이 전혀 추적되지 않는 상태 [파일을 생성하고 git add 를 안하면 untracked]

Tracked 상태 : Git에 의해 변동사항이 추적되고 있는 상태
1) Staged 상태 : 파일 내용이 수정되고 나서, staging area에 올라와 있는 상태
 - 새로 생성한 파일에 내용을 쓰고 git add를 해주거나
 - 한 번이라도 커밋에 포함되었던 파일이라도 내용을 수정하고 git add 해준 상태

2) Unmodified 상태 : 현재 파일 내용이 최신 커밋의 모습과 비교했을 때 바뀐게 없는 상태
 - 커밋을 하고 난 직후에 working directory안의 모든 파일은 이 상태

3) Modified 상태 : 최신 커밋의 모습과 비교했을 때 조금이라도 바뀐 내용이 있는 상태면 그 파일은 Modified 상태


======================
git init : 레포지터리를 만드는 것!!!(처음해야하는것)
git add . : 현재 프로젝트 디렉토리 내에서 변경사항이 생긴 모든 파일들을 staging area에 추가하라
git reset : staging area에서 파일 제거 (But, 변경된 새 모습은 그대로 working directory에 남아 있다!)
git push : 로컬 레포지터리 내용을 리모트 레포지터리에 반영
git pull : 리모트 레포지터리 내용을 로컬 레포지터리에 반영
리모트 레포지터리 의미/장점 1: 안전성 / 2: 협업가능

git log : 커밋 history를 볼수 있다
git show (커밋 ID 처음 4~5자리) : 해당 커밋의 변경사항을 볼 수 있다.
<aliasing> : 별명 붙이기 (ex) git log --pretty=oneline을 git history라는 별명으로 사용해보자)
git config alias.history "log --pretty=oneline"

git commit --amend :최신 커밋을 수정해서 다시 새로운 커밋으로 만들기
git reset : 과거 커밋으로 아예 돌아가고 싶을때 사용
--soft (커밋 앞 4글자): repository만 과거의 특정 커밋의 내용과 같게 만듬
--mixed (커밋 앞 4글자): staging area / repository를 과거의 특정 커밋의 내용과 같게 만든다
--hard (커밋 앞 4글자): working directory/ staging area/ repository를 과거의 특정 커밋 내용과 똑같게 만듬

HEAD : 가장 최근에 한 커밋을 가리킴 (HEAD가 가르키는 커밋에 따라 working directory 결정됨)

------------
GIT Hub
README.md 파일은 깃허브에서 바로 보여준다. (꿀팁)

------------ 브랜치 ------------
마스터 브랜치 : 레포지토리를 만들고 커밋을 하면 자동으로 생기는 브런치 (기본 브랜치)
브랜치 생성하기 : git branch (브랜치 이름)
브랜치 생성하면서 바로 이동 : git checkout -b (브랜치 이름)
브랜치로 이동하기 : git checkout (브랜치 이름)
현재 있는 브랜치 조회 : git branch
브랜치 삭제 : git branch -d (브랜치 이름)
